{"version":3,"sources":["proto_gonorth/state.cljs"],"mappings":"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","names":["proto-gonorth.state/initial-game-state","proto-gonorth.state/prices","level","proto-gonorth.state/in-outs","settlement-stats","workers","_","proto-gonorth.state/price-of-building","building","fexpr__16730","cljs.core.get_in","proto-gonorth.state/in-out-of-building","jobs","G__16732","G__16733","G__16734","fexpr__16731","proto-gonorth.state/latitude-to-boost","l","pred__16735","expr__16736","cljs.core/<","proto-gonorth.state/next-adventure-screen","game","cljs.core.rand","proto-gonorth.state/has-resource","st","rs","nb","proto-gonorth.state/has-resources","rss","cljs.core/every?","p__16738","vec__16739","cljs.core.nth","k","v","proto-gonorth.state/add-resources","p1__16742#","cljs.core.update_in","cljs.core.merge_with","cljs.core/+","proto-gonorth.state/merge-resources","from","to","cljs.core/reduce-kv","acc","p1__16743#","cljs.core.update","proto-gonorth.state/can-buy","p__16744","vec__16745","proto-gonorth.state/pay","price","cljs.core.reduce","p__16749","vec__16750","p1__16748#","cljs.core/seq","proto-gonorth.state/produce","in-out","proto-gonorth.state/affected-jobs","cljs.core.map","cljs.core/vals","proto-gonorth.state/remove-random-worker","vec__16753","cljs.core/first","cljs.core.filter","p__16756","vec__16757","cljs.core/dec","proto-gonorth.state/job-population-matching","proto-gonorth.state/make-people-eat","food-rest","cljs.core/assoc-in","p1__16760#","proto-gonorth.state/consume-explore-resources","state","proto-gonorth.state/take-resources-in-backpack","p1__16761#","proto-gonorth.state/next-day","cljs.core/inc","s","cljs.core._EQ_","next-screen","p1__16762#","_s","all-in-outs","p1__16763#","cljs.core/second","cljs.core.println","p1__16764#","p2__16765#","p1__16766#","p2__16767#","with-new-ressources","food-and-deaths","proto-gonorth.state/establish-settlement","settlement","proto-gonorth.state/buy-building","proto-gonorth.state/available-workers","proto-gonorth.state/add-worker","job"],"sourcesContent":["(ns proto-gonorth.state)\n\n(def initial-game-state\n  {:game\n   {:day 0\n    :latitude 1000\n    :backpack {:wood 10 :food 10 :planks 0}}\n   :screen {:id :adventure ; [:settlement :adventure]\n            :tab :settlement}})\n(def prices\n  {:buildings {:farm (fn [level] {:wood level})\n               :forester (fn [level] {:wood level})\n               :sawmill (fn [level] {:wood level})\n               :research (fn [level] {:wood (* 100 level)})}})\n\n(def in-outs\n  {:buildings\n   {:farm (fn [level settlement-stats workers] {:in {} :out\n                                                {:food (int (* workers (* level (:fertility settlement-stats))))}})\n    :forester (fn [level settlement-stats workers] {:in {} :out {:wood (int (* workers level (:woodlands settlement-stats)))}})\n    :sawmill (fn [level _ workers]\n               {:in {:wood (* workers level)}\n                :out {:planks (* workers level)}})\n    :research (fn [_ _ _] {:in {} :out {}})}})\n\n(defn price-of-building [building level]\n  ((get-in prices [:buildings building]) level))\n\n(defn in-out-of-building [building level jobs settlement-stats]\n  ((get-in in-outs [:buildings building]) level settlement-stats (get-in jobs [building :affected])))\n\n(defn latitude-to-boost [l]\n  (condp < l\n    990 0\n    900 1\n    10))\n\n(defn next-adventure-screen [game]\n  {:found\n   {:wood (:day game)}\n   :location {:woodlands (+ (latitude-to-boost (:latitude game)) (inc (rand)))\n              :fertility (+ (latitude-to-boost (:latitude game)) (inc (rand)))}\n   :ennemies {}\n   :friendlies {}})\n\n(defn has-resource [st rs nb]\n  (>= (get-in st [:game :settlement :resources rs]) nb))\n\n(defn has-resources [st rss]\n  (every?\n   (fn [[k v]] (has-resource st k v))\n   rss))\n\n(defn add-resources [st rss]\n  (update-in st [:game :settlement :resources] #(merge-with + % rss)))\n\n(defn merge-resources [from to]\n  (reduce-kv (fn [acc k v] (update acc k #(+ % v)))\n             to\n             from))\n\n(defn can-buy [st building level]\n  (every?\n   (fn [[k v]] (has-resource st k v))\n   (price-of-building building level)))\n\n(defn pay [st price]\n  (update-in st [:game :settlement :resources]\n             (fn [rs]\n               (reduce (fn [acc [k v]] (update acc k #(- % v))) rs (seq price)))))\n\n(defn produce [st in-out]\n  (if (has-resources st (:in in-out))\n    (->\n     (pay st (:in in-out))\n     (add-resources (:out in-out)))\n    st))\n\n(defn affected-jobs [st]\n  (reduce + (map :affected (vals (get-in st [:game :settlement :jobs])))))\n\n(defn remove-random-worker [st]\n  (let [[k _] (first (filter (fn [[_ v]] (pos? (:affected v))) (get-in st [:game :settlement :jobs])))]\n    (update-in st [:game :settlement :jobs k :affected] dec)))\n\n(defn job-population-matching [st]\n  (if (< (get-in st [:game :settlement :population]) (affected-jobs st))\n    (recur (remove-random-worker st))\n    st))\n\n(defn make-people-eat [st]\n  (let [food-rest (-\n                   (get-in st [:game :settlement :resources :food])\n                   (get-in st [:game :settlement :population]))]\n    (if (neg? food-rest)\n      (-> (assoc-in st [:game :settlement :resources :food] 0)\n          (update-in [:game :settlement :population] #(+ % food-rest))\n          (job-population-matching))\n      (assoc-in st [:game :settlement :resources :food] food-rest))))\n\n(defn consume-explore-resources [state]\n  (update-in state [:game :backpack :food] dec))\n\n(defn take-resources-in-backpack [state]\n  (update-in state [:game :backpack]\n             #(merge-resources % (get-in state [:game :settlement :resources]))))\n\n(defn next-day [st]\n  (->\n   (update-in st [:game :day] inc)\n   ((fn [s]\n      (if (= (get-in s [:screen :id]) :adventure)\n        (let [next-screen (next-adventure-screen (get-in s [:game]))]\n          (->\n           (assoc-in s [:screen :adventure] next-screen)\n           (update-in [:game :latitude] dec)\n           (consume-explore-resources)\n           (update-in  [:game :backpack]\n                       #(merge-resources (:found next-screen) %))\n           ((fn [_s]\n              (assoc-in _s [:screen :id]\n                        (if (neg? (get-in _s [:game :backpack :food]))\n                          :game-over\n                          :adventure))))))\n\n        (let ; screen is settlement\n         [all-in-outs\n          (map #(in-out-of-building (first %) (second %) (get-in s [:game :settlement :jobs]) (get-in s [:game :settlement :location]))\n               (get-in s [:game :settlement :buildings]))\n          _ (println \"Ins : \" (reduce #(merge-with + %1 %2) {} (map :in all-in-outs)))\n          _ (println \"outs : \" (reduce #(merge-with + %1 %2) {} (map :out all-in-outs)))\n\n          with-new-ressources (reduce (fn [acc v] (produce acc v)) s all-in-outs)\n          food-and-deaths (make-people-eat with-new-ressources)]\n\n          (println \"population : \" (get-in s [:game :settlement :population]))\n          (if (not (pos? (get-in s [:game :settlement :population])))\n            (assoc-in st [:screen :id] :game-over)\n            food-and-deaths)))))))\n\n(defn establish-settlement [st]\n  (->\n   (assoc-in st [:screen :id] :settlement)\n   (assoc-in    [:game :settlement]\n                {:buildings {:farm 0 :forester 0 :sawmill 0 :research 0}\n                 :resources (get-in st [:game :backpack])\n                 :location (get-in st [:screen :adventure :location])\n                 :population 3\n                 :jobs {:sawmill {:available (fn [settlement] (pos? (get-in settlement [:buildings :sawmill])))\n                                  :affected 0}}})\n\n   (assoc-in    [:screen :adventure] nil)\n   (assoc-in    [:game :backpack] {})))\n\n(defn buy-building [st building level]\n  (if (can-buy st building level)\n    (->\n     (pay st (price-of-building building level))\n     (update-in    [:game :settlement :buildings building] inc))\n    st))\n\n(defn available-workers [st]\n  (- (get-in st [:game :settlement :population])\n     (reduce + (map :affected (vals (get-in st [:game :settlement :jobs]))))))\n\n(defn add-worker [st job]\n  (if (pos? (available-workers st))\n    (update-in st [:game :settlement :jobs job :affected] inc)\n    st))\n"]}