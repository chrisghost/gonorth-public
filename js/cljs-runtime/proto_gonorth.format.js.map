{"version":3,"sources":["proto_gonorth/format.cljs"],"mappings":";AAGA,8BAAA,9BAAMA,oEAAQC,OAAOC;AAArB,AAAA,0FAAA,qDAAA,mFAAA,qDAEU,AAACC,4CAAI,WAAKC;AAAL,AAAQ;GAAW,AAACC,8CAAM,CAAA,MAAKJ,kBAE3C,EAAI,AAACK,qBAAKJ,IACR,AAACC,4CAAI,WAAAI;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AAAA,0FAAA,uDAAA,FAAmBD,SAAS,iBAAAE,WAAQ,UAAA,TAAKX;IAAbY,WAAqBF;AAArB,AAAA,8HAAAC,SAAAC,kDAAAD,SAAAC,1LAACb,4DAAAA,+EAAAA;;sDALvC,mFAAA,tIAKgEE,GAC3D,4CAAKA;;AAMV,oCAAA,pCAAMY,gFAAcZ;AAApB,AAAA,0FAAA,mDAEG,iBAAAa,qBAAA,0DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA27EgD,AAAAiB,sBAAAtB;IA37EhDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAOjB;QAAP,AAAAD,4CAAAkB,WAAA,IAAA,/DAAShB;AAAT,AAAA,AAAA,AAAAkB,uBAAAL,SAAA,mFAAA,uDAAA,FACcd,SAAS,4BAAA,5BAACV,gCAASW;;AADjC,eAAA,CAAAe,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,gDAAA,AAAAC,qBAAAjB;;AAAA,OAAAc,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,IAAAU,aAAA,AAAAC,gBAAAnB;QAAA,AAAAP,4CAAAyB,WAAA,IAAA,/DAAOxB;QAAP,AAAAD,4CAAAyB,WAAA,IAAA,/DAASvB;AAAT,AAAA,OAAAyB,eAAA,mFAAA,uDAAA,kDAAA,AAAAJ,gDAAA,AAAAK,eAAArB,nHACcN,SAAS,4BAAA,5BAACV,gCAASW;;;AADjC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAI,mBAAYb","names":["proto-gonorth.format/pprint","offset","m","cljs.core.map","_","cljs.core.range","cljs.core/map?","p__26722","vec__26723","cljs.core.nth","k","v","G__26726","G__26727","proto-gonorth.format/pretty-print","iter__5523__auto__","s__26729","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__26731","cljs.core/chunk-buffer","i__26730","vec__26732","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26728","cljs.core/chunk-rest","vec__26735","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/chunk-first"],"sourcesContent":["(ns proto-gonorth.format\n  (:require [clojure.string :as str]))\n\n(defn pprint [offset m]\n  [:span\n   [:span (map (fn [_] (str \".\")) (range (* 3 offset)))]\n   ;[:div \"M = \" m]\n   (if (map? m)\n     (map (fn [[k v]] [:span k \" -> \" (pprint (inc offset) v)]) m)\n     (str m)\n     )\n   [:br]\n   ]\n  )\n\n(defn pretty-print [m]\n  [:div\n   (for [[k v] m]\n          [:span k \" -> \" (pprint 1 v)]\n          )\n   ])\n"]}